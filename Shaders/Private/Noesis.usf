#include "/Engine/Private/Common.ush"

#ifndef EFFECT
    #error EFFECT not defined
#endif

// These have to match the enums in NoesisGuiShaders.h
#define EFFECT_RGBA                0
#define EFFECT_MASK                1
#define EFFECT_PATH                2
#define EFFECT_PATH_AA             3
#define EFFECT_IMAGE_PAINT_OPACITY 4
#define EFFECT_TEXT                5

#define PAINT_SOLID                0
#define PAINT_LINEAR               1
#define PAINT_RADIAL               2
#define PAINT_PATTERN              3
#define PAINT_NONE                 4


#if EFFECT == EFFECT_RGBA
#elif EFFECT == EFFECT_MASK
#elif EFFECT == EFFECT_PATH
#elif EFFECT == EFFECT_PATH_AA
    #define HAS_COVERAGE
#elif EFFECT == EFFECT_IMAGE_PAINT_OPACITY
    #define HAS_UV1
#elif EFFECT == EFFECT_TEXT
    #define HAS_UV1
#else
    #error Unknown Effect
#endif

#ifdef PAINT
    #if PAINT == PAINT_SOLID
        #define HAS_COLOR
    #elif PAINT == PAINT_LINEAR
        #define HAS_UV0
    #elif PAINT == PAINT_RADIAL
        #define HAS_UV0
    #elif PAINT == PAINT_PATTERN
        #define HAS_UV0
    #elif PAINT == PAINT_NONE
    #else
        #error Unknown Paint mode
    #endif
#endif


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float opacity;
float4 rgba;
float4 radialGrad[2];
float4x4 projectionMtx;
Texture2D patternTex;
SamplerState patternSampler;
Texture2D rampsTex;
SamplerState rampsSampler;
Texture2D imageTex;
SamplerState imageSampler;
Texture2D glyphsTex;
SamplerState glyphsSampler;


struct VertexData
{
    half4 position: ATTRIBUTE0;

#ifdef HAS_COLOR
    fixed4 color: ATTRIBUTE1;
#endif

#ifdef HAS_UV0
    half2 uv0: ATTRIBUTE2;
#endif

#ifdef HAS_UV1
    half2 uv1: ATTRIBUTE3;
#endif

#ifdef HAS_COVERAGE
    float coverage: ATTRIBUTE4;
#endif
};

struct PixelData
{
    half4 position: SV_POSITION;

#ifdef HAS_COLOR
    fixed4 color: COLOR0;
#endif

#ifdef HAS_UV0
    half2 uv0: TEXCOORD0;
#endif

#ifdef HAS_UV1
    half2 uv1: TEXCOORD1;
#endif

#ifdef HAS_COVERAGE
    fixed coverage: TEXCOORD2;
#endif
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PixelData Vertex(VertexData i)
{
    PixelData o;

    //o.position = mul(mul(i.position, projectionMtx), View.TranslatedWorldToClip);
    o.position = mul(i.position, projectionMtx);

#ifdef HAS_COLOR
    o.color FCOLOR_COMPONENT_SWIZZLE = i.color.bgra;
#endif

#ifdef HAS_UV0
    o.uv0 = i.uv0;
#endif

#ifdef HAS_UV1
    o.uv1 = i.uv1;
#endif

#ifdef HAS_COVERAGE
    o.coverage = i.coverage;
#endif

    return o;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fixed4 Pixel(PixelData i): SV_Target0
{
    /////////////////////////////////////////////////////
    // Fetch paint color and opacity
    /////////////////////////////////////////////////////
#ifdef PAINT
    #if PAINT == PAINT_SOLID
        fixed4 paint = i.color;
        fixed opacity_ = 1.0f;

    #elif PAINT == PAINT_LINEAR
        fixed4 paint = Texture2DSampleLevel(rampsTex, rampsSampler, i.uv0, 0);
        fixed opacity_ = opacity;

    #elif PAINT == PAINT_RADIAL
        half dd = radialGrad[1].y * i.uv0.x - radialGrad[1].z * i.uv0.y;
        half u = radialGrad[0].x * i.uv0.x + radialGrad[0].y * i.uv0.y + radialGrad[0].z * 
            sqrt(radialGrad[0].w * i.uv0.x * i.uv0.x + radialGrad[1].x * i.uv0.y * i.uv0.y - dd * dd);
        fixed4 paint = Texture2DSampleLevel(rampsTex, rampsSampler, half2(u, radialGrad[1].w), 0);
        fixed opacity_ = opacity;

    #elif PAINT == PAINT_PATTERN
        fixed4 paint = Texture2DSampleLevel(patternTex, patternSampler, i.uv0, 0);
        fixed opacity_ = opacity;

    #elif PAINT == PAINT_NONE
        fixed4 paint = fixed4(1.0f, 1.0f, 1.0f, 1.0f);
        fixed opacity_ = 1.0f;
    #endif
#endif

    /////////////////////////////////////////////////////
    // Apply selected effect
    /////////////////////////////////////////////////////
    #if EFFECT == EFFECT_RGBA
        return rgba;

    #elif EFFECT == EFFECT_MASK
        return fixed4(1.0f, 1.0f, 1.0f, 1.0f);

    #elif EFFECT == EFFECT_PATH
        return opacity_ * paint;

    #elif EFFECT == EFFECT_PATH_AA
        return (opacity_ * i.coverage) * paint;

    #elif EFFECT == EFFECT_IMAGE_PAINT_OPACITY
        return Texture2DSampleLevel(imageTex, imageSampler, i.uv1, 0) * (opacity_ * paint.a);

    #elif EFFECT == EFFECT_TEXT
        return (Texture2DSampleLevel(glyphsTex, glyphsSampler, i.uv1, 0).r * opacity_) * paint;

    #endif
}
